# ðŸ”¹ Ã‰tape 1 : Base AWS Lambda
FROM public.ecr.aws/lambda/python:3.8 as base

# ðŸ”¹ Ã‰tape 2 : EntraÃ®nement du modÃ¨le
FROM base AS train
WORKDIR /var/task

# âœ… Installer les outils de compilation pour `scikit-surprise`
RUN yum install -y gcc gcc-c++ make libstdc++-devel

# âœ… Copier et installer les dÃ©pendances, y compris `boto3`
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt boto3  

# âœ… DÃ©finir le chemin du modÃ¨le
ENV MODEL_PATH=/tmp/recommender_model_hybrid.pkl

# âœ… Copier le script d'entraÃ®nement et lâ€™exÃ©cuter
COPY train.py .

# Passer les credentials AWS en build args
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_REGION

# DÃ©finir les variables d'environnement pour `boto3`
ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
ENV AWS_REGION=${AWS_REGION}

# ExÃ©cuter echo pour afficher les valeurs des variables (durant le build)
RUN echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" && \
    echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" && \
    echo "AWS_REGION=$AWS_REGION"
RUN python3 train.py

# ðŸ”¹ Ã‰tape 3 : Construction de lâ€™image finale pour AWS Lambda
FROM base
WORKDIR /var/task

# âœ… RÃ©installer les outils de compilation si nÃ©cessaire (utile pour `surprise`)
RUN yum install -y gcc gcc-c++ make libstdc++-devel

# âœ… Installer `scikit-learn`, `surprise` et `boto3` pour lâ€™infÃ©rence
RUN pip install --no-cache-dir scikit-learn surprise boto3

# âœ… Copier le modÃ¨le entraÃ®nÃ© depuis lâ€™Ã©tape `train`
COPY --from=train /tmp/recommender_model_hybrid.pkl /var/task/recommender_model_hybrid.pkl

# âœ… Copier le fichier de recommandation (Lambda handler)
COPY hybrid_recommender.py .

# âœ… Assurer l'arrÃªt immÃ©diat en cas d'erreur (bonne pratique)
RUN set -e

# ðŸ”¹ DÃ©finition du point dâ€™entrÃ©e de la Lambda
CMD ["hybrid_recommender.lambda_handler"]
