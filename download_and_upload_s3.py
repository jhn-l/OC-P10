import os
import requests
import zipfile
import boto3

# üìå Configuration des variables
DATA_URL = "https://s3-eu-west-1.amazonaws.com/static.oc-static.com/prod/courses/files/AI+Engineer/Project+9+-+R%C3%A9alisez+une+application+mobile+de+recommandation+de+contenu/news-portal-user-interactions-by-globocom.zip"
ZIP_FILE = "news-portal.zip"
EXTRACTED_FOLDER = "."  # Extraction dans le r√©pertoire courant
S3_BUCKET_NAME = "my-recommender-dataset"

# üìå Configuration AWS
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION", "eu-north-1")

# üìå Initialisation du client S3
s3_client = boto3.client(
    "s3",
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    region_name=AWS_REGION,
)

def file_exists_in_s3(s3_key):
    """V√©rifie si un fichier existe d√©j√† sur S3."""
    try:
        s3_client.head_object(Bucket=S3_BUCKET_NAME, Key=s3_key)
        return True
    except:
        return False

def download_zip_file():
    """T√©l√©charge le fichier ZIP depuis l'URL fournie si non pr√©sent"""
    if not os.path.exists(ZIP_FILE):
        print(f"üîπ T√©l√©chargement de {DATA_URL}...")
        response = requests.get(DATA_URL, stream=True)
        with open(ZIP_FILE, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        print("‚úÖ T√©l√©chargement termin√© !")
    else:
        print("‚úÖ Fichier ZIP d√©j√† pr√©sent, t√©l√©chargement ignor√©.")

def extract_zip_file(zip_path, extract_to):
    """D√©compresse un fichier ZIP si non extrait"""
    if not os.path.exists(extract_to + "/articles_metadata.csv"):
        print(f"üîπ D√©compression de {zip_path}...")
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extract_to)
        print("‚úÖ D√©compression termin√©e !")
    else:
        print("‚úÖ Fichiers d√©j√† extraits, extraction ignor√©e.")

def upload_to_s3(file_path, s3_key):
    """T√©l√©verse un fichier vers AWS S3 si non pr√©sent"""
    if not file_exists_in_s3(s3_key):
        print(f"üîπ Upload de {file_path} vers S3 ({S3_BUCKET_NAME}/{s3_key})...")
        s3_client.upload_file(file_path, S3_BUCKET_NAME, s3_key)
        print(f"‚úÖ {file_path} upload√© avec succ√®s !")
    else:
        print(f"‚úÖ {file_path} d√©j√† pr√©sent sur S3, upload ignor√©.")

if __name__ == "__main__":
    # üìå √âtape 1 : T√©l√©charger le fichier ZIP si n√©cessaire
    download_zip_file()

    # üìå √âtape 2 : D√©compresser si n√©cessaire
    extract_zip_file(ZIP_FILE, EXTRACTED_FOLDER)

    # üìå √âtape 3 : V√©rifier et extraire clicks.zip si pr√©sent
    click_zip_file = os.path.join(EXTRACTED_FOLDER, "clicks.zip")
    if os.path.exists(click_zip_file):
        extract_zip_file(click_zip_file, EXTRACTED_FOLDER)
    else:
        print("‚ö†Ô∏è clicks.zip n'a pas √©t√© trouv√© !")

    # üìå √âtape 4 : Upload des fichiers principaux vers S3 si n√©cessaire
    files_to_upload = [
        "articles_metadata.csv",
        "articles_embeddings.pickle",
        "clicks_sample.csv",
    ]

    for file_path in files_to_upload:
        if os.path.exists(file_path):
            upload_to_s3(file_path, file_path)  # Envoie avec le m√™me nom
        else:
            print(f"‚ö†Ô∏è Fichier introuvable : {file_path}")

    # üìå √âtape 5 : Upload des fichiers horaires "clicks/clicks_hour_XXX.csv" si n√©cessaires
    clicks_folder = "clicks"
    if os.path.exists(clicks_folder):
        for file in os.listdir(clicks_folder):
            file_path = os.path.join(clicks_folder, file)
            if os.path.isfile(file_path):
                upload_to_s3(file_path, f"clicks/{file}")  # Stocker dans un dossier clicks/ sur S3
    else:
        print("‚ö†Ô∏è Aucun dossier 'clicks/' trouv√©, aucun fichier suppl√©mentaire √† uploader.")

    print("üöÄ Processus termin√© !")
