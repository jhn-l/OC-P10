# ðŸ”¹ Ã‰tape 1 : Image de construction
FROM python:3.12 AS build

ARG FUNCTION_DIR="/function"
RUN mkdir -p ${FUNCTION_DIR}
WORKDIR ${FUNCTION_DIR}

# âœ… Installer les outils de compilation nÃ©cessaires
RUN apt-get update && apt-get install -y \
    gcc g++ make libstdc++-12-dev libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# âœ… Installer NumPy en version compatible (1.x)
RUN pip install --no-cache-dir "numpy<2"

# âœ… Installer les autres dÃ©pendances SANS Surprise
RUN pip install --no-cache-dir --target ${FUNCTION_DIR} \
    scikit-learn boto3 pandas

# âœ… Installer `Surprise` SEULEMENT aprÃ¨s NumPy pour Ã©viter les erreurs de compilation
RUN pip install --no-cache-dir --target ${FUNCTION_DIR} \
    --no-binary :all: --force-reinstall scikit-surprise

# ðŸ”¹ Ã‰tape 2 : EntraÃ®nement du modÃ¨le
FROM build AS train
WORKDIR /function

# âœ… DÃ©finir le chemin du modÃ¨le
ENV MODEL_PATH=/tmp/recommender_model_hybrid.pkl
ENV SURPRISE_DATASET_DIR="/tmp"

# âœ… Copier le script d'entraÃ®nement
COPY train.py .

# âœ… ExÃ©cuter l'entraÃ®nement du modÃ¨le
RUN python3 train.py

# ðŸ”¹ Ã‰tape 3 : Image finale pour AWS Lambda
FROM python:3.12-slim AS final
ARG FUNCTION_DIR="/function"
WORKDIR ${FUNCTION_DIR}

# âœ… Copier uniquement les dÃ©pendances prÃ©installÃ©es
COPY --from=build ${FUNCTION_DIR} ${FUNCTION_DIR}

# âœ… Copier le modÃ¨le entraÃ®nÃ© depuis lâ€™Ã©tape `train`
COPY --from=train /tmp/recommender_model_hybrid.pkl ${FUNCTION_DIR}/recommender_model_hybrid.pkl

# âœ… Copier le fichier de recommandation (Lambda handler)
COPY hybrid_recommender.py .

# âœ… DÃ©finir le Runtime Interface Client pour AWS Lambda
ENTRYPOINT [ "/usr/local/bin/python", "-m", "awslambdaric" ]
CMD ["hybrid_recommender.lambda_handler"]
