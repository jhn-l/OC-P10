name: Setup AWS Infrastructure & Upload Data

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer AWS SDK et d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Ex√©cuter le script d'initialisation (cr√©ation DynamoDB + Upload S3)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: python download_and_upload_s3.py
      
      - name: üì¶ Cr√©er un Layer pour les d√©pendances
        run: |
          mkdir -p python
          pip install --target=python -r requirements.txt
          zip -r9 dependencies_layer.zip python

      - name: üöÄ D√©ployer le Layer AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name HybridRecommenderDependencies \
            --zip-file fileb://dependencies_layer.zip \
            --compatible-runtimes python3.8 python3.9 \
            --query 'Version' --output text || echo "")
          if [ -z "$LAYER_VERSION" ]; then
            echo "‚ùå Erreur: Impossible de r√©cup√©rer la version du Layer"
            exit 1
          fi
          echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

      - name: üì¶ Packager la Lambda Hybrid Recommender (sans d√©pendances)
        run: |
          mkdir -p lambda_package
          cp hybrid_recommender.py lambda_package/
          cd lambda_package
          zip -r9 ../hybrid_recommender.zip .

      - name: üöÄ D√©ployer la Lambda Hybrid Recommender avec Layer
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
        run: |
          if aws lambda get-function --function-name HybridRecommenderLambda > /dev/null 2>&1; then
            echo "‚ö†Ô∏è Mise √† jour de la Lambda HybridRecommender..."
            aws lambda update-function-code \
              --function-name HybridRecommenderLambda \
              --zip-file fileb://hybrid_recommender.zip
          else
            echo "üöÄ Cr√©ation de la Lambda HybridRecommender..."
            if [ ! -z "$LAYER_VERSION" ]; then
              aws lambda create-function \
                --function-name HybridRecommenderLambda \
                --runtime python3.8 \
                --role $AWS_LAMBDA_ROLE_ARN \
                --handler hybrid_recommender.lambda_handler \
                --zip-file fileb://hybrid_recommender.zip \
                --layers arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:HybridRecommenderDependencies:$LAYER_VERSION
            else
              echo "‚ö†Ô∏è Layer non d√©fini, cr√©ation sans layer..."
              aws lambda create-function \
                --function-name HybridRecommenderLambda \
                --runtime python3.8 \
                --role $AWS_LAMBDA_ROLE_ARN \
                --handler hybrid_recommender.lambda_handler \
                --zip-file fileb://hybrid_recommender.zip
            fi
          fi

      - name: D√©ployer API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws apigatewayv2 create-api \
            --name "RecommenderAPI" \
            --protocol-type HTTP \
            --target arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:GetUserRecommendations
