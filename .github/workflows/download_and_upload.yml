name: Setup AWS Infrastructure & Upload Data

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer AWS SDK et d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Ex√©cuter le script d'initialisation (cr√©ation DynamoDB + Upload S3)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: python download_and_upload_s3.py
      
      - name: üì¶ Construire l'image Docker pour Lambda
        run: |
          docker build -t hybrid-recommender -f DockerfileAWS .

      - name: üìå V√©rifier et cr√©er le repository ECR si n√©cessaire
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr describe-repositories --repository-names hybrid-recommender || \
          aws ecr create-repository --repository-name hybrid-recommender

      - name: üöÄ D√©ployer la Lambda Hybrid Recommender avec Docker
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker tag hybrid-recommender:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest
          
          if aws lambda get-function --function-name HybridRecommenderLambda > /dev/null 2>&1; then
            echo "‚ö†Ô∏è La fonction HybridRecommenderLambda existe d√©j√†. Mise √† jour..."
            aws lambda update-function-code \
              --function-name HybridRecommenderLambda \
              --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest
          else
            echo "üöÄ Cr√©ation de la fonction Lambda HybridRecommender..."
            aws lambda create-function \
              --function-name HybridRecommenderLambda \
              --package-type Image \
              --code ImageUri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest \
              --role $AWS_LAMBDA_ROLE_ARN
          fi

      - name: D√©ployer API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws apigatewayv2 create-api \
            --name "RecommenderAPI" \
            --protocol-type HTTP \
            --target arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:GetUserRecommendations
