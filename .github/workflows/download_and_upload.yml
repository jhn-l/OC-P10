name: Setup AWS Infrastructure & Upload Data

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer AWS SDK et d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Ex√©cuter le script d'initialisation (cr√©ation DynamoDB + Upload S3)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: python -c "from download_and_upload_s3 import create_dynamodb_table, insert_sample_data; create_dynamodb_table(); insert_sample_data()"

      
      - name: üì¶ Construire l'image Docker pour Lambda
        run: |
          docker build \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t hybrid-recommender -f DockerfileAWS .

      - name: üìå V√©rifier et cr√©er le repository ECR si n√©cessaire
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr describe-repositories --repository-names hybrid-recommender || \
          aws ecr create-repository --repository-name hybrid-recommender

      - name: üöÄ Pousser l'image Docker vers ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker tag hybrid-recommender:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest
      
      - name: üöÄ Supprimer et recr√©er la Lambda Hybrid Recommender
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          if aws lambda get-function --function-name ImplicitRecommenderLambda > /dev/null 2>&1; then
            echo "‚ö†Ô∏è La fonction ImplicitRecommenderLambda existe d√©j√†. Suppression..."
            aws lambda delete-function --function-name ImplicitRecommenderLambda
            sleep 20  # Pause pour √©viter tout conflit
          fi
          
          echo "üöÄ Cr√©ation de la fonction Lambda HybridRecommender..."
          aws lambda create-function \
            --function-name ImplicitRecommenderLambda \
            --package-type Image \
            --code ImageUri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest \
            --role $AWS_LAMBDA_ROLE_ARN
          
          echo "üïí Attente que la Lambda soit active..."
          sleep 20  # Pause pour √©viter l'√©tat Pending

      - name: üöÄ Mise √† jour de la fonction Lambda avec l'image Docker
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/hybrid-recommender:latest"
          
          echo "‚ö° V√©rification que la Lambda est active avant mise √† jour..."
          for i in {1..10}; do
            STATUS=$(aws lambda get-function --function-name ImplicitRecommenderLambda --query 'Configuration.State' --output text)
            if [ "$STATUS" == "Active" ]; then
              echo "‚úÖ Lambda est Active, mise √† jour en cours..."
              aws lambda update-function-code \
                --function-name ImplicitRecommenderLambda \
                --image-uri $IMAGE_URI
              echo "‚úÖ D√©ploiement termin√© !"
              exit 0
            fi
            echo "üïí Attente que la Lambda soit Active... ($i/10)"
            sleep 10
          done
          echo "‚ùå √âchec : La Lambda est rest√©e dans l'√©tat 'Pending'."
          exit 1

      - name: üöÄ Mise √† jour de la fonction Lambda 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          echo "‚ö° V√©rification que la Lambda est pr√™te avant mise √† jour..."
          for i in {1..30}; do
              STATUS=$(aws lambda get-function --function-name ImplicitRecommenderLambda --query 'Configuration.State' --output text)
              LAST_UPDATE_STATUS=$(aws lambda get-function --function-name ImplicitRecommenderLambda --query 'Configuration.LastUpdateStatus' --output text)

              if [[ "$STATUS" == "Active" && "$LAST_UPDATE_STATUS" == "Successful" ]]; then
                  echo "‚úÖ Lambda est Active et pr√™te, mise √† jour de la configuration..."
                  aws lambda update-function-configuration \
                    --function-name ImplicitRecommenderLambda \
                    --memory-size 2048 \
                    --ephemeral-storage '{"Size": 512}' \
                    --timeout 305 
                  echo "‚úÖ D√©ploiement termin√© !"
                  exit 0
              fi

              echo "üïí Attente que la Lambda soit compl√®tement pr√™te... (Status: $STATUS, LastUpdate: $LAST_UPDATE_STATUS) ($i/15)"
              sleep 10
          done

          echo "‚ùå √âchec : La Lambda est rest√©e bloqu√©e."
          exit 1

      - name: D√©ployer API Gateway
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws apigatewayv2 create-api \
            --name "RecommenderAPI" \
            --protocol-type HTTP \
            --target arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:GetUserRecommendations
